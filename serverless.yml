service: padel

package:
  exclude:
    - ./**
    - node_modules/**
    - venv/**
  include:
    - lambdas/**
    - tools/**

provider:
  name: aws
  stage: ${self:custom.stage}
  endpointType: regional
  runtime: python3.7
  region: ${self:custom.region}
  environment:
    PLAYERS_TABLE: ${self:custom.playersTable}
    RANKING_BUCKET: ${self:custom.rankingBucket}
    SNS_SCRAPING_ARN: arn:aws:sns:${self:custom.region}:${AWS::AccountId}:${self:custom.scrapingTopic}
    SQS_POST_PLAYER_ARN: arn:aws:sqs:${self:custom.region}:${AWS::AccountId}:${self:custom.postPlayerQueue}



  # apiGateway:
  #   shouldStartNameWithService: true
  #   apiKeys:
  #     - free:
  #         - myFreeKey2022
  #         - ${self:custom.stage}-myFreeKey22
  #     - paid:
  #         - myPaidKey22
  #         - ${self:custom.stage}-myPaidKey22
  #   usagePlan:
  #     - free:
  #         quota:
  #           limit: 5000
  #           offset: 2
  #           period: MONTH
  #         throttle:
  #           burstLimit: 200
  #           rateLimit: 100
  #     - paid:
  #         quota:
  #           limit: 50000
  #           offset: 1
  #           period: MONTH
  #         throttle:
  #           burstLimit: 2000
  #           rateLimit: 1000

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:*:*:*
        - arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.playersTable}
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
      Resource:
        - arn:aws:s3:::${self:custom.rankingBucket}/*
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - arn:aws:sns:${self:custom.region}:${AWS::AccountId}:${self:custom.scrapingTopic}
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource:
        - arn:aws:sns:${self:custom.region}:${AWS::AccountId}:${self:custom.postPlayerQueue}

custom:
  region: eu-west-1
  stage: prod
  prefix: padel
  playersTable: ${self:service}-${self:custom.config.playersTableName}.${self:custom.region}.com
  rankingBucket: ${self:service}-${self:custom.config.rankingBucket}.${self:custom.region}.com
  scrapingTopic: ${self:service}-${self:custom.config.scrapingTopicName}
  postPlayerQueue: ${self:service}-${self:custom.config.postPlayerQueueName}



  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - prod
    start:
      port: 8000
      # inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: false
    seed:
      domain:
        sources:
          - table: ${self:custom.playersTable}

  #-------------VARIABLES------------------------------------
  config: ${file(./config.yml)}

  #-------------LAMBDAS------------------------------------
functions:
  #-------------SCRAPING-----------------------------------------
  scraping_ranking:
    handler: lambdas/scraping_ranking/handler_scraping_ranking.h_scraping_ranking
    layers:
      - arn:aws:lambda:eu-west-1:533796783460:layer:selenium:1
      - arn:aws:lambda:eu-west-1:533796783460:layer:chromedriver:1
      - arn:aws:lambda:eu-west-1:533796783460:layer:bs4:1
    timeout: 10

  scraping_player:
    handler: lambdas/scraping_player/handler_scraping_player.h_scraping_player
    layers:
      - arn:aws:lambda:eu-west-1:533796783460:layer:bs4:1
    timeout: 10
    events:
      - sns:
          arn: arn:aws:sns:${self:custom.region}:${AWS::AccountId}:${self:custom.scrapingTopic}
          topicName: ${self:custom.scrapingTopic}


  #-------------PLAYERS-----------------------------------
  get_player:
    handler: lambdas/get_player/handler_get_player.h_get_player
    #events:
    #  - http:
    #      path: ${self:custom.config.apiUrls.players}/get/{name}
    #      method: get
    #      cors: true
    #      private: true

  post_player:
    handler: lambdas/post_player/handler_post_player.h_post_player
    events:
      - sqs:
          arn: arn:aws:sqs:${self:custom.region}:${AWS::AccountId}:${self:custom.postPlayerQueue}

#-------------RESOURCES--------------------
resources:
  Resources:
    #-------------S3---------------------
    rankingBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.rankingBucket}

    #-------------DYNAMODB------------------------------------
    playersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.playersTable}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
          - AttributeName: position
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
          - AttributeName: position
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

#---------PLUGINS----------
plugins:
  - serverless-python-requirements
