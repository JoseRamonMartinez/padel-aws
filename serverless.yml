service: padel

package:
  exclude:
    - ./**
    - node_modules/**
    - venv/**
  include:
    - lambdas/**
    - tools/**

provider:
  name: aws
  stage: ${self:custom.stage}
  endpointType: regional
  runtime: python3.7
  region: ${self:custom.region}
  environment:
    PLAYERS_TABLE: ${self:custom.playersTable}
    SNS_SCRAPING_ARN: arn:aws:sns:${self:custom.region}:${self:custom.accountId}:${self:custom.scrapingTopic}
    SNS_POST_PLAYER_ARN: arn:aws:sns:${self:custom.region}:${self:custom.accountId}:${self:custom.postPlayerTopic}
  apiKeys:
    - free:
        - freePadelApiKey2022
    - paid:
        - paidPadelApiKey2022
  usagePlan:
    - free:
        quota:
          limit: 5000
          offset: 2
          period: MONTH
        throttle:
          burstLimit: 200
          rateLimit: 100
    - paid:
        quota:
          limit: 50000
          offset: 1
          period: MONTH
        throttle:
          burstLimit: 2000
          rateLimit: 1000

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:*:*:*
        - arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.playersTable}
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - arn:aws:sns:${self:custom.region}:${self:custom.accountId}:${self:custom.scrapingTopic}
        - arn:aws:sns:${self:custom.region}:${self:custom.accountId}:${self:custom.postPlayerTopic}
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - arn:aws:lambda:${self:custom.region}:${self:custom.accountId}:function:${self:custom.prefix}-${self:custom.region}-get_ranking
        - arn:aws:lambda:${self:custom.region}:${self:custom.accountId}:function:${self:custom.prefix}-${self:custom.region}-get_player_by_positon
        - arn:aws:lambda:${self:custom.region}:${self:custom.accountId}:function:${self:custom.prefix}-${self:custom.region}-get_player_by_name

custom:
  region: eu-west-1
  stage: prod
  prefix: padel
  accountId: ${self:custom.config.accountIdNumber}
  playersTable: ${self:service}-${self:custom.config.playersTableName}.${self:custom.region}.com
  scrapingTopic: ${self:service}-${self:custom.config.scrapingTopicName}
  postPlayerTopic: ${self:service}-${self:custom.config.postPlayerTopicName}




  dynamodb:
    ttl:
      - table: ${self:custom.playersTable}
        field: ttl
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - prod
    start:
      port: 8000
      # inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: false
    seed:
      domain:
        sources:
          - table: ${self:custom.playersTable}
            sources: ${self:custom.config.playersSeeder}

  #-------------VARIABLES------------------------------------
  config: ${file(./config.yml)}

  #-------------LAMBDAS------------------------------------
functions:
  #-------------SCRAPING-----------------------------------------
  scraping_ranking:
    handler: lambdas/scraping_ranking/handler_scraping_ranking.h_scraping_ranking
    layers:
      - arn:aws:lambda:eu-west-1:533796783460:layer:selenium:1
      - arn:aws:lambda:eu-west-1:533796783460:layer:chromedriver:1
      - arn:aws:lambda:eu-west-1:533796783460:layer:bs4:1
    timeout: 10
    events:
      - schedule: cron(30 23 1 * ? *)

  scraping_player:
    handler: lambdas/scraping_player/handler_scraping_player.h_scraping_player
    layers:
      - arn:aws:lambda:eu-west-1:533796783460:layer:bs4:1
    timeout: 10
    events:
      - sns:
          arn: arn:aws:sns:${self:custom.region}:${self:custom.accountId}:${self:custom.scrapingTopic}
          topicName: ${self:custom.scrapingTopic}

  #-------------RANKING-----------------------------------
  get_ranking:
    handler: lambdas/get_ranking/handler_get_ranking.h_get_ranking
    events:
      - http:
          path: ${self:custom.config.apiUrls.players}/ranking
          method: get
          cors: true
          private: true
  #-------------PLAYERS-----------------------------------
  get_player_by_name:
    handler: lambdas/get_player/handler_get_player.h_get_player_by_name
    events:
      - http:
          path: ${self:custom.config.apiUrls.players}/name/{name}
          method: get
          cors: true
          private: true

  get_player_by_position:
    handler: lambdas/get_player/handler_get_player.h_get_player_by_position
    events:
      - http:
          path: ${self:custom.config.apiUrls.players}/ranking/{position}
          method: get
          cors: true
          private: true

  post_player:
    handler: lambdas/post_player/handler_post_player.h_post_player
    events:
      - sns:
          arn: arn:aws:sns:${self:custom.region}:${self:custom.accountId}:${self:custom.postPlayerTopic}
          topicName: ${self:custom.postPlayerTopic}

#-------------RESOURCES--------------------
resources:
  Resources:
    #-------------SNS---------------------
    scrapingTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.scrapingTopic}

    postPlayerTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.postPlayerTopic}

    #-------------DYNAMODB------------------------------------
    playersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.playersTable}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
          - AttributeName: position
            AttributeType: N
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: PositionIndex
            KeySchema:
              - AttributeName: position
                KeyType: HASH
              - AttributeName: name
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
#---------PLUGINS----------
plugins:
  - serverless-python-requirements
  - serverless-dynamodb-ttl